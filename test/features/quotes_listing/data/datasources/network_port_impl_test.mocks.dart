// Mocks generated by Mockito 5.4.4 from annotations
// in srijan_technologies_assessment/test/features/quotes_listing/data/datasources/network_port_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:common/infrastructure-layer/utils/network/network_info.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i2;
import 'package:srijan_technologies_assessment/infrastructure-layer/model/response/quotes/quote_details_response.dart'
    as _i6;
import 'package:srijan_technologies_assessment/infrastructure-layer/model/response/quotes/quotes_list_response.dart'
    as _i5;
import 'package:srijan_technologies_assessment/infrastructure-layer/service/retrofit_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RetrofitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetrofitService extends _i1.Mock implements _i3.RetrofitService {
  @override
  _i4.Future<
      _i2.HttpResponse<List<_i5.QuotesListingResponse>>> getQuotesResponse(
          int? limit) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuotesResponse,
          [limit],
        ),
        returnValue:
            _i4.Future<_i2.HttpResponse<List<_i5.QuotesListingResponse>>>.value(
                _FakeHttpResponse_0<List<_i5.QuotesListingResponse>>(
          this,
          Invocation.method(
            #getQuotesResponse,
            [limit],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.HttpResponse<List<_i5.QuotesListingResponse>>>.value(
                _FakeHttpResponse_0<List<_i5.QuotesListingResponse>>(
          this,
          Invocation.method(
            #getQuotesResponse,
            [limit],
          ),
        )),
      ) as _i4.Future<_i2.HttpResponse<List<_i5.QuotesListingResponse>>>);

  @override
  _i4.Future<_i2.HttpResponse<_i6.QuoteDetailsResponse>>
      getQuoteDetailsResponse(String? selectedQuoteId) => (super.noSuchMethod(
            Invocation.method(
              #getQuoteDetailsResponse,
              [selectedQuoteId],
            ),
            returnValue:
                _i4.Future<_i2.HttpResponse<_i6.QuoteDetailsResponse>>.value(
                    _FakeHttpResponse_0<_i6.QuoteDetailsResponse>(
              this,
              Invocation.method(
                #getQuoteDetailsResponse,
                [selectedQuoteId],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.HttpResponse<_i6.QuoteDetailsResponse>>.value(
                    _FakeHttpResponse_0<_i6.QuoteDetailsResponse>(
              this,
              Invocation.method(
                #getQuoteDetailsResponse,
                [selectedQuoteId],
              ),
            )),
          ) as _i4.Future<_i2.HttpResponse<_i6.QuoteDetailsResponse>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
